import { SvelteComponent, init, safe_not_equal, create_slot, element, insert, get_slot_context, get_slot_changes, transition_in, transition_out, detach, set_input_value, listen } from 'svelte/internal';

/* src/lib/index.svelte generated by Svelte v3.22.2 */

const get_default_slot_changes = dirty => ({});
const get_default_slot_context = ctx => ({ cep: "cep" });

// (8:17)      
function fallback_block(ctx) {
	let input;
	let dispose;

	return {
		c() {
			input = element("input");
		},
		m(target, anchor, remount) {
			insert(target, input, anchor);
			set_input_value(input, /*cepValue*/ ctx[0]);
			if (remount) dispose();
			dispose = listen(input, "input", /*input_input_handler*/ ctx[3]);
		},
		p(ctx, dirty) {
			if (dirty & /*cepValue*/ 1 && input.value !== /*cepValue*/ ctx[0]) {
				set_input_value(input, /*cepValue*/ ctx[0]);
			}
		},
		d(detaching) {
			if (detaching) detach(input);
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let div;
	let current;
	const default_slot_template = /*$$slots*/ ctx[2].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], get_default_slot_context);
	const default_slot_or_fallback = default_slot || fallback_block(ctx);

	return {
		c() {
			div = element("div");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(div, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 2) {
					default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[1], get_default_slot_context), get_slot_changes(default_slot_template, /*$$scope*/ ctx[1], dirty, get_default_slot_changes));
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*cepValue*/ 1) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { cepValue } = $$props;
	let { $$slots = {}, $$scope } = $$props;

	function input_input_handler() {
		cepValue = this.value;
		$$invalidate(0, cepValue);
	}

	$$self.$set = $$props => {
		if ("cepValue" in $$props) $$invalidate(0, cepValue = $$props.cepValue);
		if ("$$scope" in $$props) $$invalidate(1, $$scope = $$props.$$scope);
	};

	return [cepValue, $$scope, $$slots, input_input_handler];
}

class Lib extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { cepValue: 0 });
	}
}

export default Lib;
