{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../index.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import AdressAutocomplete from \"../lib/index.svelte\";\n  import AdressAutocompleteTwo from \"../lib/AdressAutocomplete.svelte\";\n\n\n  let cepValue = \"\";\n  let streetValue = \"\";\n\n  let autocompleteObj = {};\n\n  function handleCallback(event) {\n    autocompleteObj = event.detail.data\n  }\n\n\n  function handleCallbackTwo(event) {\n    autocompleteObj = event.detail.data\n  }\n</script>\n\n\n<main>\n  <div class=\"row\">\n    <h1> Teste 1 </h1>\n    <AdressAutocomplete on:callback={handleCallback} ClassName=\"newName\">\n      <div class=\"form-group\">\n        <label>Rua: </label>\n        <input type=\"text\" name=\"rua\" bind:value={autocompleteObj.logradouro} />\n      </div>\n    </AdressAutocomplete>\n  </div>\n\n  <h1> Teste 2</h1>\n  <AdressAutocompleteTwo on:callback={handleCallbackTwo}>\n    <input type=\"password\" bind:value={cepValue} slot=\"inputcep\">\n  </AdressAutocompleteTwo>\n\n</main>\n\n<style>\n  main {\n    display: flex;\n    width: 100%;\n    height: 100%;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n  }\n  .row {\n    margin-bottom: 32px;\n  }\n  .form-group {\n    display: flex;\n    flex-direction: column;\n    margin-bottom: 16px;\n  }\n  :global(.newName) {\n    color: #fff;\n  }\n</style>",
    "<script>\n  import { createEventDispatcher } from 'svelte';\n\n  export let value;\n  export let cepValue = '';\n  export let streetValue = '';\n  export let neighborhoodValue =  '';\n  export let ClassName = 'default';\n\n  let statusCode = 200;\n\n  const dispatch = createEventDispatcher();\n\n\n\n  function sendCallback(message) {\n    dispatch('callback', message);\n  }\n\n\n  function onBlur() {\n    if(cepValue !== ''){\n      fetch(`https://viacep.com.br/ws/${cepValue}/json/`)\n      .then((response) => {\n        statusCode = response.status;\n        return response.json(); \n      })\n      .then(data => {\n        streetValue = data.logradouro;\n        neighborhoodValue = data.bairro;\n        sendCallback({\n          status: 200,\n          data,\n        });\n      }).catch(error => {\n        sendCallback({\n          status: statusCode,\n          message: error\n        })\n      })\n    }\n  }\n</script>\n\n<div class={ClassName}>\n  <div class=\"form-group\">\n    <label>Cep: </label>\n    <input type=\"text\" bind:value={cepValue} on:blur={onBlur}>\n  </div>\n  <slot></slot>\n</div>\n\n<style>\n  .form-group {\n    display: flex;\n    flex-direction: column;\n    margin-bottom: 16px;\n  }\n</style>"
  ],
  "names": [],
  "mappings": "AAwCE,IAAI,eAAC,CAAC,AACJ,OAAO,CAAE,IAAI,CACb,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,MAAM,CACvB,cAAc,CAAE,MAAM,AACxB,CAAC,AACD,IAAI,eAAC,CAAC,AACJ,aAAa,CAAE,IAAI,AACrB,CAAC,AACD,WAAW,eAAC,CAAC,AACX,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,aAAa,CAAE,IAAI,AACrB,CAAC,AACO,QAAQ,AAAE,CAAC,AACjB,KAAK,CAAE,IAAI,AACb,CAAC;ACLD,WAAW,eAAC,CAAC,AACX,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,aAAa,CAAE,IAAI,AACrB,CAAC"
}